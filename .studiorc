#!/bin/bash
RED='\033[0;31m'
NO_COLOR='\033[0m'
set -uo pipefail

export APP_HOSTNAME
export OAUTH_PROVIDER
export OAUTH_USERINFO_URL
export OAUTH_AUTHORIZE_URL
export OAUTH_TOKEN_URL
export OAUTH_CLIENT_ID
export OAUTH_CLIENT_SECRET
export OAUTH_REDIRECT_URL
export GITHUB_API_URL
export GITHUB_APP_ID
export GITHUB_APP_URL
export SSL_CERT_FILE
export DEV_MODE
export HAB_STATS_ADDR

# Wrap a function with this one to ensure that it stops executing if any of its
# commands return nonzero. If so, a highly-visible message is printed which
# should make the error condition more apparent.
stop-on-failure() {
  (set -e; "$@");
  rv=$?
  if [ $rv -ne 0 ]; then
    echo -e "${RED}ERROR: $* aborted due to error${NO_COLOR}"
    return 1
  fi
}

no_install_deps() {
  local file="/src/components/${1}/cleanup"
  if [ ! -f "$file" ]; then
    touch "$file"
  else
    echo "1"
  fi
}

_init-datastore() {
  mkdir -p /hab/svc/builder-datastore
  cp -f /src/support/builder/datastore.toml /hab/svc/builder-datastore/user.toml
}
init-datastore() { stop-on-failure _init-datastore; }

load_env_config() {
  local env_config
  env_config="/src/.secrets/habitat-env"

  if [[ -f "${env_config}" ]]; then
    source "${env_config}"
  else
    echo -e "${RED}.secrets/habitat-env is required. Please see DEVELOPING.md for getting started instructions.${NO_COLOR}"
    exit 1
  fi
}

configure() {
  load_env_config
  /src/support/builder/config.sh
}

install-packages() {
  hab pkg install \
  core/cacerts \
  core/net-tools \
  core/procps-ng \
  core/shadow \
  core/curl \
  -b -c stable
}

_build-builder-component() {
  local component="$1"

  stop-builder "$component"

  NO_INSTALL_DEPS=$(no_install_deps "builder-$component") \
    build "/src/components/builder-$component/habitat-dev"
  echo "builder-$component build succeeded"

  start-builder "$component"
}
build-builder-component() { stop-on-failure _build-builder-component "$@"; }

alias bb=build-builder
_build-builder() {
  if [[ $(hab sup status) == "No services loaded." ]]; then
    start-builder
  fi

  if [[ "$#" -eq 0 ]]; then
    build-builder api jobsrv originsrv router sessionsrv worker
    return $?
  fi

  for component in "$@"; do
    build-builder-component "$component"
  done
}
build-builder() { stop-on-failure _build-builder "$@"; }

ui-dev-mode() {
  for svc in sessionsrv worker api originsrv; do
  cat <<CONFIG | hab config apply builder-${svc}.default "$(date +%s)"
[github]
client_id = "Iv1.732260b62f84db15"
client_secret = "fc7654ed8c65ccfe014cd339a55e3538f935027a"
app_id = 5629
CONFIG
done
}

upload_github_keys() {
  if [[ -f "/src/.secrets/builder-github-app.pem" ]]; then
    for svc in sessionsrv worker api originsrv; do
      hab file upload "builder-${svc}.default" "$(date +%s)" "/src/.secrets/builder-github-app.pem"
    done
  else
    echo "Please follow instruction #6 here: https://github.com/habitat-sh/habitat/blob/master/BUILDER_DEV.md#pre-reqs"
    sleep 10
  fi
}

command-exists() {
  command -V "$1" > /dev/null 2>&1
}

_start-builder() {
  if [[ "$#" -eq 0 ]]; then
    start-builder datastore
    configure
    start-builder cache
    start-builder router
    start-builder api
    start-builder api-proxy
    start-builder jobsrv
    start-builder originsrv
    start-builder sessionsrv
    start-builder worker
    sleep 2
    generate_bldr_keys
    upload_github_keys
    echo "Builder Started: Navigate to http://localhost/#/pkgs/core to access the web UI."
    return $?
  fi

  for component in "$@"; do
    if [ -v "svc_params[$component]" ]; then
      # shellcheck disable=SC2086
      load-if-not-loaded habitat/builder-$component ${svc_params[$component]}
    elif command-exists "start-$component"; then
      "start-$component"
    else
      echo -e "${RED}ERROR: Unknown builder service: $component${NO_COLOR}"
      return 1
    fi
  done
}
start-builder() { stop-on-failure _start-builder "$@"; }

_load-if-not-loaded() {
  local pkg_ident
  pkg_ident=$1
  if hab sup status "${pkg_ident}" | grep "${pkg_ident}" > /dev/null; then
    echo "$pkg_ident is already loaded"
  else
    hab svc load "$@"
  fi
}
load-if-not-loaded() { stop-on-failure _load-if-not-loaded "$@"; }

start-datastore() {
if hab sup status habitat/builder-datastore | grep "builder-datastore" > /dev/null; then
    echo "habitat/builder-datastore is already loaded"
  else
    init-datastore
    hab svc load habitat/builder-datastore
  fi
}

start-cache() {
  load-if-not-loaded core/sccache
}

declare -A svc_params=(
  [api]="        -s at-once --bind router:builder-router.default"
  [api-proxy]="             --bind http:builder-api.default"
  [jobsrv]="     -s at-once --bind router:builder-router.default --bind datastore:builder-datastore.default"
  [originsrv]="  -s at-once --bind router:builder-router.default --bind datastore:builder-datastore.default"
  [router]="     -s at-once"
  [sessionsrv]=" -s at-once --bind router:builder-router.default --bind datastore:builder-datastore.default"
  [worker]="     -s at-once --bind jobsrv:builder-jobsrv.default --bind depot:builder-api-proxy.default"
)

_stop-builder() {
  if [[ "$#" -eq 0 ]]; then
    stop-builder cache api api-proxy datastore jobsrv originsrv router sessionsrv worker
    return $?
  fi

  for component in "$@"; do
    if [ $component == cache ]; then
      hab svc unload core/sccache
    else
      hab svc unload habitat/builder-$component
    fi
  done
}
stop-builder() { stop-on-failure _stop-builder "$@"; }

generate_bldr_keys() {
  keys=( $(find /hab/cache/keys -name "bldr-*.pub") )

  if [ "${#keys[@]}" -gt 0 ]; then
    KEY_NAME=$(echo $keys[0] | grep -Po "bldr-\d+")
    echo "Re-using existing builder key: $KEY_NAME"
  else
    KEY_NAME=$(hab user key generate bldr | grep -Po "bldr-\d+")
    echo "Generated new builder key: $KEY_NAME"
  fi

  for svc in api jobsrv worker; do
    hab file upload "builder-${svc}.default" "$(date +%s)" "/hab/cache/keys/${KEY_NAME}.pub"
    hab file upload "builder-${svc}.default" "$(date +%s)" "/hab/cache/keys/${KEY_NAME}.box.key"
  done
}

load_package() {
  hab pkg upload --url http://localhost:9636/v1 --auth "${HAB_AUTH_TOKEN}" "$@" --channel stable
}

load_packages() {
  if [[ -d /src/pkgs ]]; then
    for pkg in /src/pkgs/core*.hart ; do
      load_package "${pkg}"
    done
  fi
}

load_bootstrap_packages() {
  load_package /src/pkgs/core-hab-backline-0.39.0-dev-20171101044221-x86_64-linux.hart
  load_package /src/pkgs/core-hab-launcher-6083-20171101045646-x86_64-linux.hart
  load_package pkgs/core-hab-sup-0.34.0-dev-20170929202328-x86_64-linux.hart
  load_package pkgs/core-docker-17.09.0-20171001205930-x86_64-linux.hart
  load_package pkgs/core-elasticsearch-5.6.1-20171015201557-x86_64-linux.hart
}

origin() {
  local origin=${1:-core}
  if curl --fail localhost:9636/v1/depot/origins \
    -d "{\"name\":\"${origin}\"}" \
    -H "Authorization:Bearer:${HAB_AUTH_TOKEN}";
  then
    hab origin key generate "${origin}"
    hab origin key upload --url http://localhost:9636 -z "${HAB_AUTH_TOKEN}" -s "${origin}"
  else
    echo "Failed to create origin ${origin}"
  fi
}

function psql() {
  local config_dir port
  config_dir="/hab/svc/builder-datastore/config"
  port=$(grep port $config_dir/postgresql.conf | grep -oE '[[:digit:]]+')
  PGPASSWORD=$(cat $config_dir/pwfile) hab pkg exec core/postgresql psql -U hab -h 127.0.0.1 -p "$port" "$@"
}

export -f psql

project() {
  curl http://localhost:9636/v1/projects -q \
    -d '{ "origin": "core", "plan_path": "nginx/plan.sh", "github": { "organization": "habitat-sh", "repo": "core-plans" } }' \
    -H "Authorization:Bearer:${HAB_AUTH_TOKEN}"
}

job() {
  curl POST http://localhost:9636/v1/jobs \
    -d '{"project_id":"core/nginx"}' \
    -H "Authorization:Bearer:${HAB_AUTH_TOKEN}"
}

# Cleanup any development touch files we laid down when checking to see if we could run NO_INSTALL_DEPS
local_cleanup() {
  for svc in api api-proxy datastore jobsrv originsrv router sessionsrv worker; do
    if [ -f "/src/components/builder-${svc}/cleanup" ]; then
      rm "/src/components/builder-${svc}/cleanup"
    fi
  done
}

alias help=dev_docs
dev_docs() {
  cat <<DOCS
Welcome to the development environment for Habitat & Builder.
The following commands are available:

1. Building Habitat Web
  * Ensure you have a unzipped download of packages from http://nunciato-shared-files.s3.amazonaws.com/pkgs.zip in the habitat directory
  * In the studio (after builder has started)
  * * origin <name> - create an origin and keys specified by the first argument. Default: core
  * * load_packages - load all the packages from core
  * Outside of the studio
  * * cd components/builder-web
  * * npm i - install the node packages
  * * npm load - run the web dev env
2. Building Builder
  * build-builder (alias: bb) - build Builder components
    USAGE: build-builder [COMPONENT]...
    With no args, build all builder components
    Valid components: api jobsrv originsrv router sessionsrv worker
3. Running Builder
  * install-packages - Install all dependent packages
  * start-builder/stop-builder - load/unload Builder services
    USAGE: start-builder [SERVICE]...
            stop-builder [SERVICE]...
    With no args, load/unload all builder services
    Valid services: api api-proxy cache datastore jobsrv originsrv router sessionsrv worker
  * ui-dev-mode - helper to switch the github app to localhost:3000
4. Helpers
  * psql - wrapper around psql to enable passwordless auth
  * upload_github_keys - internal function to upload github secret keys to the ring
5. Docs
  * dev_docs (alias: help)
DOCS
}

install-packages

# Forces the worker to use a bound docker socket
DEV_MODE=true

load_env_config

touch /etc/subuid
touch /etc/subgid
hab pkg exec core/shadow groupadd --force krangschnak
if ! hab pkg exec core/coreutils id -u krangschnak > /dev/null; then
  hab pkg exec core/shadow useradd --groups=tty --create-home -g krangschnak krangschnak
fi

trap local_cleanup EXIT

# Print out the docs
dev_docs
