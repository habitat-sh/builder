#!/bin/bash

export APP_HOSTNAME
export GITHUB_API_URL
export GITHUB_WEB_URL
export GITHUB_CLIENT_ID
export GITHUB_CLIENT_SECRET
export GITHUB_ADMIN_TEAM
export GITHUB_WORKER_TEAM
export GITHUB_WEBHOOK_SECRET
export WORKER_AUTH_TOKEN
export SSL_CERT_FILE

sup-run() {
  mkdir -p /hab/sup/default
  echo "--> Launching the Habitat Supervisor in the background..."
  echo "    Running: hab sup run $*"
  hab sup run $* > /hab/sup/default/sup.log 2>&1 &
  echo "    * Use 'hab svc start' & 'hab svc stop' to start and stop services"
  echo "    * Use 'sup-log' to tail the Supervisor's output (Ctrl+c to stop)"
  echo "    * Use 'sup-term' to terminate the Supervisor"
  if [[ -z "${HAB_STUDIO_SUP:-}" ]]; then
    echo "    * To pass custom arguments to run the Supervisor, export"
    echo "      'HAB_STUDIO_SUP' with the arguments before running"
    echo "      'hab studio enter'."
  fi
  echo ""
}

sup-log() {
  mkdir -p /hab/sup/default
  touch /hab/sup/default/sup.log
  echo "--> Tailing the Habitat Supervisor's output (use 'Ctrl+c' to stop)"
  tail -f /hab/sup/default/sup.log
}

alias sr='sup-run'
alias st='sup-term'
alias sl='sup-log'

init-datastore() {
  mkdir -p /hab/svc/builder-datastore
  cp -f /src/support/builder/datastore.toml /hab/svc/builder-datastore/user.toml
  /src/support/builder/init-datastore.sh
}

configure() {
  sup-term
  sleep 2
  /src/support/builder/config.sh
  sleep 2
  sup-run
}

install-packages() {
  hab pkg install core/cacerts core/net-tools core/procps-ng core/postgresql core/shadow -b -c stable
  hab pkg install \
  core/builder-admin \
  core/builder-admin-proxy \
  core/builder-api \
  core/builder-api-proxy \
  core/builder-datastore \
  core/builder-jobsrv \
  core/builder-originsrv \
  core/builder-router \
  core/builder-sessionsrv \
  core/builder-worker -c unstable
}

build-habitat() {
  build-hab
  build-launcher
  build-sup
}

build-hab() {
  build "/src/components/hab"
}

build-launcher() {
  build "/src/components/launcher"
}

build-sup() {
  build "/src/components/sup"
}

build-builder() {
  build-admin
  build-admin-proxy
  build-api
  build-api-proxy
  build-datastore
  build-jobsrv
  build-originsrv
  build-router
  build-sessionsrv
  build-worker
}

build-admin() {
  build "/src/components/builder-admin"
}

build-admin-proxy() {
  build "/src/components/builder-admin-proxy"
}

build-api() {
  build "/src/components/builder-api"
}

build-api-proxy() {
  build "/src/components/builder-api-proxy"
}

build-datastore() {
  build "/src/components/builder-datastore"
}

build-jobsrv() {
  build "/src/components/builder-jobsrv"
}

build-originsrv() {
  build "/src/components/builder-originsrv"
}

build-router() {
  build "/src/components/builder-router"
}

build-sessionsrv() {
  build "/src/components/builder-sessionsrv"
}

build-worker() {
  build "/src/components/builder-worker"
}

upload_github_keys() {
  if [[ -f "/src/.secrets/builder-github-app.pem" ]]; then
    hab file upload builder-sessionsrv.default $(date +%s) "/src/.secrets/builder-github-app.pem"
    hab file upload builder-worker.default $(date +%s) "/src/.secrets/builder-github-app.pem"
    hab file upload builder-api.default $(date +%s) "/src/.secrets/builder-github-app.pem"
  else
    echo "Please follow instruction #6 here: https://github.com/habitat-sh/habitat/blob/master/BUILDER_DEV.md#pre-reqs"
  fi
}

start-builder() {
  start-datastore
  start-router
  start-admin
  start-admin-proxy
  start-api
  start-api-proxy
  start-jobsrv
  start-originsrv
  start-sessionsrv
  start-worker
  sleep 2
  upload_github_keys
  generate_bldr_keys
}

start-admin() {
  hab svc load core/builder-admin --bind router:builder-router.default
}

start-admin-proxy() {
  hab svc load core/builder-admin-proxy --bind http:builder-admin.default
}

start-api() {
  hab svc load core/builder-api --bind router:builder-router.default
}

start-api-proxy() {
  hab svc load core/builder-api-proxy --bind http:builder-api.default
}

start-datastore() {
  hab svc load core/builder-datastore
}

start-jobsrv() {
  hab svc load core/builder-jobsrv --bind router:builder-router.default --bind datastore:builder-datastore.default
}

start-originsrv() {
  hab svc load core/builder-originsrv --bind router:builder-router.default --bind datastore:builder-datastore.default
}

start-router() {
  hab svc load core/builder-router
}

start-sessionsrv() {
  hab svc load core/builder-sessionsrv --bind router:builder-router.default --bind datastore:builder-datastore.default
}

start-worker() {
  hab svc load core/builder-worker --bind jobsrv:builder-jobsrv.default --bind depot:builder-api-proxy.default
}

stop-builder() {
  stop-admin
  stop-admin-proxy
  stop-api
  stop-api-proxy
  stop-datastore
  stop-jobsrv
  stop-originsrv
  stop-router
  stop-sessionsrv
  stop-worker
}

stop-admin() {
  hab svc unload core/builder-admin
}

stop-admin-proxy() {
  hab svc unload core/builder-admin-proxy
}

stop-api() {
  hab svc unload core/builder-api
}

stop-api-proxy() {
  hab svc unload core/builder-api-proxy
}

stop-datastore() {
  hab svc unload core/builder-datastore
}

stop-jobsrv() {
  hab svc unload core/builder-jobsrv
}

stop-originsrv() {
  hab svc unload core/builder-originsrv
}

stop-router() {
  hab svc unload core/builder-router
}

stop-sessionsrv() {
  hab svc unload core/builder-sessionsrv
}

stop-worker() {
  hab svc unload core/builder-worker
}

generate_bldr_keys() {
  KEY_NAME=$(hab user key generate bldr | grep -Po "bldr-\d+")
  for svc in builder-api builder-jobsrv builder-worker ; do
    hab file upload "${svc}.default" $(date +%s) "/hab/cache/keys/${KEY_NAME}.pub"
    hab file upload "${svc}.default" $(date +%s) "/hab/cache/keys/${KEY_NAME}.box.key"
  done
}

load_packages() {
  if [[ -d /src/pkgs ]]; then
    for pkg in /src/pkgs/core*.hart ; do
      hab pkg upload --url http://localhost:9636/v1 --auth "${HAB_AUTH_TOKEN}" "${pkg}" --channel stable
    done
  fi
}

origin() {
  curl localhost:9636/v1/depot/origins \
    -d '{"name":"core"}' \
    -H "Authorization:Bearer:${HAB_AUTH_TOKEN}"
}

keys() {
  if [ -f ~/.hab/cache/keys/core-20160810182414.pub ]; then
    cat ~/.hab/cache/keys/core-20160810182414.pub | hab origin key import
  fi

  if [ -f ~/.hab/cache/keys/core-20160810182414.sig.key ]; then
    cat ~/.hab/cache/keys/core-20160810182414.sig.key | hab origin key import
  fi

  cat /hab/cache/keys/core-20160810182414.pub | \
  curl http://localhost:9636/v1/depot/origins/core/keys/20160810182414 \
    --data-binary @- \
    -H "Authorization:Bearer:${HAB_AUTH_TOKEN}"

  cat /hab/cache/keys/core-20160810182414.sig.key | \
  curl http://localhost:9636/v1/depot/origins/core/secret_keys/20160810182414 \
    --data-binary @- \
    -H "Authorization:Bearer:${HAB_AUTH_TOKEN}"
}

project() {
  curl http://localhost:9636/v1/projects -q \
    -d '{ "origin": "core", "plan_path": "nginx/plan.sh", "github": { "organization": "habitat-sh", "repo": "core-plans" } }'
    -H "Authorization:Bearer:${HAB_AUTH_TOKEN}"
}

job() {
  curl POST http://localhost:9636/v1/jobs \
    -d '{"project_id":"core/nginx"}' \
    -H "Authorization:Bearer:${HAB_AUTH_TOKEN}"
}

dev_docs() {
  cat <<DOCS
Welcome to the development environment for Habitat & Builder.
The following commands are available:
1. Building Habitat
  * build-habitat - build all Habitat components
  * build-hab - build the Habitat CLI
  * build-sup - build the Habitat Supervisor
  * build-launcher - build the Habitat Launcher
2. Building Habitat Web
  * Ensure you have a unzipped download of packages from http://nunciato-shared-files.s3.amazonaws.com/pkgs.zip in the habitat directory
  * In the studio (after builder has started)
  * * origin - create the core origin
  * * keys - generate keys for the core origin
  * * load_packages - load all the packages from core
  * Outside of the studio
  * * cd components/builder-web
  * * npm i - install the node packages
  * * npm start - run the web dev env
3. Building Builder
  * build-builder - build all Builder components
  * build-admin - build the Admin Gateway
  * build-admin-proxy - build the Admin Gateway Proxy
  * build-api - build the API Gateway
  * build-api-proxy - build the API Gateway Proxy
  * build-datastore - build Builder's Datastore
  * build-jobsrv - build the JobSrv
  * build-originsrv - build the OriginSrv
  * build-router - build the RouteSrv
  * build-sessionsrv - build the SessionSrv
  * build-worker - build the Worker
4. Running Builder
  * start-builder - run all Builder services
  * stop-builder - stop all Builder services
  * start-{svc} - start a specfic Builder service. See the
    above list of build targets for available services
  * stop-{svc} - stop a specific Builder service
DOCS
}

install-packages
hab pkg exec core/shadow useradd hab || echo "User 'hab' already exists"

# NOTE: these are dev secrets (not for the actual Builder services);
# it's OK
APP_HOSTNAME=localhost:3000
GITHUB_API_URL=https://api.github.com
GITHUB_WEB_URL=https://github.com
GITHUB_CLIENT_ID=Iv1.732260b62f84db15
GITHUB_CLIENT_SECRET=fc7654ed8c65ccfe014cd339a55e3538f935027a
WORKER_AUTH_TOKEN=fc7654ed8c65ccfe014cd339a55e3538f935027a
GITHUB_ADMIN_TEAM=1995301
GITHUB_WORKER_TEAM=1995301
GITHUB_WEBHOOK_SECRET=58d4afaf5e5617ab0f8c39e505605e78a054d003
SSL_CERT_FILE=$(hab pkg path core/cacerts)/ssl/cert.pem

hab pkg binlink core/curl curl

# If this file exists our services are likely already loaded
if [ ! -f /hab/svc/builder-api/user.toml ]; then
init-datastore
configure
start-builder
fi

touch /etc/subuid
touch /etc/subgid
hab pkg exec core/shadow groupadd --force krangschnak
hab pkg exec core/shadow useradd --groups=tty --create-home -g krangschnak krangschnak || echo "User 'krangschnak' already exists"

# Print out the docs
dev_docs
