#!/bin/bash

export HAB_DOCKER_OPTS="-p 80:80 -p 9636:9636 -p 9631:9631 -p 9638:9638 -p 5432:5432"
export HAB_STUDIO_SUP="--auto-update"
export HAB_ORIGIN_KEYS
export HAB_ORIGIN="habitat"

# This script originally had two large repeated code blocks with the difference
# being that one ran using '~/.hab' and the other used '/hab' as the root for
# the operations within.  This eliminates the duplication in favor of
# $hab_root.
if [ -d ~/.hab ]; then
  hab_root=~/.hab
else
  hab_root=/hab
fi
HAB_CONFIG="$hab_root/etc/cli.toml"

# This really only ever execute if the executing user has configured the
# cli.toml via 'hab cli setup'.  Also, I think this will set the variables
# within to the empty string if they aren't present but that's a problem for
# later as it's been that way for a long time now and I'm not aware of an
# issues that its's causing at this time.
if [ -e "$HAB_CONFIG" ]; then
  HAB_AUTH_TOKEN=$(cat $HAB_CONFIG | grep "auth_token" | awk '{print $3}' | tr -d '"')
  HAB_ORIGIN=$(cat $HAB_CONFIG | grep "origin" | awk '{print $3}' | tr -d '"')
  export HAB_AUTH_TOKEN HAB_ORIGIN
fi

# This is the problem I really came to address in reworking this script. I have
# a lot of different keys for the same origin and this variable was a mess with
# 10s of the same key and it was causing me issues often enough that I started
# unsetting it as a regular practice.  This creates a list without dups and
# only adds the HAB_ORIGIN to the list if it doesn't already exist in the list.
declare -A hash
for key in "$hab_root"/cache/keys/*.sig.key; do
  x=${key##*/}
  x=${x%-*}
  hash["$x"]="$x"
done
unset x

for x in "${!hash[@]}"; do
  if [[ -n $HAB_ORIGIN_KEYS ]]; then
    HAB_ORIGIN_KEYS+=",$x"
  else
    HAB_ORIGIN_KEYS+="$x"
  fi
done
unset x

if [[ ! -v hash["$HAB_ORIGIN"] ]]; then
  HAB_ORIGIN_KEYS="${HAB_ORIGIN_KEYS},${HAB_ORIGIN}"
fi
unset hash

if [ -z "${HAB_AUTH_TOKEN:-}" ]; then
  echo "WARNING: No auth token set. Please run hab setup before running builder."
fi
