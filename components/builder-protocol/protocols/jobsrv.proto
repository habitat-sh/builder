syntax = "proto2";
package jobsrv;
import "net.proto";
import "originsrv.proto";

enum Os {
  Linux = 1;
  Darwin = 2;
  Windows = 3;
}

enum WorkerState {
  Ready = 0;
  Busy = 1;
}

enum WorkerOperation {
  StartJob = 0;
  CancelJob = 1;
}

enum JobState {
  Pending = 0;
  Processing = 1;
  Complete = 2;
  Rejected = 3;
  Failed = 4;
  Dispatched = 5;
  CancelPending = 6;
  CancelProcessing = 7;
  CancelComplete = 8;
}

message WorkerCommand {
  optional WorkerOperation op = 1;
}

message Heartbeat {
  optional string endpoint = 1;
  optional Os os = 2;
  optional WorkerState state = 3;
  optional string target = 4;
}

message BusyWorker {
  optional string ident = 1;
  optional uint64 job_id = 2;
  optional bool quarantined = 3;
  optional string target = 4;
}

message Job {
  reserved 10;
  reserved "log_url";
  optional uint64 id = 1;
  optional uint64 owner_id = 2;
  optional JobState state = 3;
  optional originsrv.OriginProject project = 4;
  optional net.NetError error = 5;
  optional string created_at = 6; // RFC3339-formatted time
  optional string build_started_at = 7; // RFC3339-formatted time
  optional string build_finished_at = 8;
  optional originsrv.OriginPackageIdent package_ident = 9;
  optional bool is_archived = 11;
  repeated originsrv.OriginIntegration integrations = 12;
  optional string channel = 13;
  repeated originsrv.OriginProjectIntegration project_integrations = 14;
  optional string worker = 15;
  repeated originsrv.OriginSecretDecrypted secrets = 16;
  optional string target = 17;
}

message JobGet {
  optional uint64 id = 1;
}

message JobSpec {
  optional uint64 owner_id = 1;
  optional originsrv.OriginProject project = 2;
  optional string channel = 3;
  optional string target = 4;
}

message JobLogChunk {
  optional uint64 job_id = 1;
  optional uint64 seq = 2; // Chunk ordering (line number)
  optional string content = 3; // Log content (TODO: Make repeatedfield)
}

message JobLogComplete {
  optional uint64 job_id = 1;
}

message JobLogGet {
  optional uint64 id = 1;
  optional uint64 start = 2; // Zero-indexed line of log output
}

message JobLog {
  optional uint64 start = 1; // Zero-indexed (inclusive) line
  optional uint64 stop = 2; // Zero-indexed (exclusive) line
  repeated string content = 3;
  optional bool is_complete = 4;
}

enum JobGroupTrigger {
  Unknown = 0;
  Webhook = 1;
  Upload = 2;
  HabClient = 3;
  BuilderUI = 4;
}

enum JobGroupOperation {
  JobGroupOpCreate = 1;
  JobGroupOpCancel = 2;
}

message JobGroupAudit {
  optional uint64 group_id = 1;
  optional JobGroupOperation operation = 2;
  optional JobGroupTrigger trigger = 3;
  optional uint64 requester_id = 4;
  optional string requester_name = 5;
}

message JobGroupSpec {
  optional string origin = 1;
  optional string package = 2;
  optional bool deps_only = 3;
  optional string target = 4;
  optional bool origin_only = 5;
  optional bool package_only = 6;
  optional JobGroupTrigger trigger = 7;
  optional uint64 requester_id = 8;
  optional string requester_name = 9;
}

// Start a build based on the results of a previous build. 
// Takes information on origin, target, and build scope from previous build.
// 
// Takes any specified `packages` and if add_failed_packages is true adds any packages 
// that failed to build in previous build and uses that to form the kernel to expand to a full build set.
//
// Open questions to resolve:
// We use 'optional' field types everywhere here; why? Most of these aren't optional
// 
message JobGroupRebuildFromSpec {
  optional uint64 job_group_id = 1;
  optional string origin = 2;
  repeated string packages = 3;
  optional bool add_failed_packages = 4;
  optional uint64 requester_id = 5;
  optional string requester_name = 6;
}

enum JobGroupProjectState {
  NotStarted = 0;
  InProgress = 1;
  Success = 2;
  Failure = 3;
  Skipped = 4;
  Canceled = 5;
  NotFound = 6;
}

message JobGroupProject {
  optional string name = 1;
  optional string ident = 2;
  optional JobGroupProjectState state = 3;
  optional uint64 job_id = 4;
  optional string target = 5;
}

enum JobGroupState {
  GroupPending = 0;
  GroupDispatching = 1;
  GroupComplete = 2;
  GroupFailed = 3;
  GroupQueued = 4;
  GroupCanceled = 5;
}

message JobGroupCancel {
  optional uint64 group_id = 1;
  optional JobGroupTrigger trigger = 7;
  optional uint64 requester_id = 8;
  optional string requester_name = 9;
}

message JobGroupGet {
  optional uint64 group_id = 1;
  optional bool include_projects = 2;
}

message JobGroupOriginGet {
  optional string origin = 1;
  optional uint32 limit = 2;
}

message JobGroupOriginResponse {
  repeated JobGroup job_groups = 1;
}

message JobGroup {
  optional uint64 id = 1;
  optional JobGroupState state = 2;
  repeated JobGroupProject projects = 3;
  optional string created_at = 4;
  optional string project_name = 5;
  optional string target = 6;
}

message JobGraphPackageCreate {
  optional originsrv.OriginPackage package = 1;
}

message JobGraphPackagePreCreate {
  optional string ident = 1;
  repeated string deps = 2;
  optional string target = 3;
  repeated string build_deps = 4;
}

message JobGraphPackageReverseDependenciesGet {
  optional string origin = 1;
  optional string name = 2;
  optional string target = 3;
}

message JobGraphPackageReverseDependencies {
  optional string origin = 1;
  optional string name = 2;
  repeated string rdeps = 3;
}

message JobGraphPackageReverseDependenciesGroupedGet {
  optional string origin = 1;
  optional string name = 2;
  optional string target = 3;
}

message JobGraphPackageReverseDependencyGroup {
  optional uint32 group_id = 1;
  repeated string idents = 2;
}

message JobGraphPackageReverseDependenciesGrouped {
  optional string origin = 1;
  optional string name = 2;
  repeated JobGraphPackageReverseDependencyGroup rdeps = 3;
}
