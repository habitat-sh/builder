#%RAML 1.0
title: Builder API
version: v1
mediaType: application/json
protocols:
  - HTTPS
baseUriParameters:
  rootUri:
    description: |
      The root URI for the particular installation of Builder
    example: 'bldr.habitat.sh, api.habitat.sh, localhost:9636'
  version: {}
baseUri: 'https://{rootUri}/{version}'
securitySchemes:
  oauth_2_0:
    description: Builder supports OAuth 2.0 for authenticating all API requests.
    type: OAuth 2.0
    settings:
      authorizationUri: 'https://{rootUri}/oauth2/authorize'
      accessTokenUri: 'https://{rootUri}/oauth2/token'
      authorizationGrants:
        - implicit
    describedBy:
      responses:
        '401':
          description: |
            Bad or expired token. To fix, you should re-authenticate the user.
        '403':
          description: |
            Bad OAuth request. Regenerate your token and try again.
      headers:
        Authorization:
          description: Used to send a valid OAuth 2 access token.
          example: |
            Authorization: Bearer 0b79bab50daca910b000d4f1a2b675d604257e42
types:
  netError:
    properties:
      code:
        type: integer
      msg:
        type: string
  job:
    properties:
      id:
        type: string
      origin:
        type: string
      name:
        type: string
      version:
        type: string
      release:
        type: string
      state:
        type: string
        enum:
          - Complete
          - Dispatched
          - Failed
          - Pending
          - Processing
          - Rejected
      created_at:
        type: string
        required: false
      build_started_at:
        type: string
        required: false
      build_finished_at:
        type: string
        required: false
      error:
        type: netError
        required: false
  jobs:
    properties:
      jobs:
        minItems: 0
        uniqueItems: true
        type: array
        items:
          type: job
        required: false
  jobCreate:
    properties:
      project_id:
        type: string
  jobLog:
    properties:
      start:
        description: The zero-indexed line number (inclusive) of the first line of log output in `content`.
        type: integer
      stop:
        description: The zero-indexed line number (exclusive) of the last line of log output in `content`. Pass this number as the `start` query parameter on your next log request to retrieve the next portion of the log.
        type: integer
      content:
        description: 'A subset of the log output, presented as individual lines. Trailing newline characters are not present. May be empty.'
        type: array
        items:
          type: string
      is_complete:
        description: 'Indicates whether the job log is complete; i.e. additional polling for new lines is not required. Note that a job itself may be complete (i.e., finished running) but the log may not, as log processing is decoupled from build processing.'
        type: boolean
  project:
    properties:
      id:
        type: string
      plan_path:
        type: string
      vcs:
        type: object
        properties:
          type:
            type: string
          url:
            type: string
  projectCreate:
    properties:
      origin:
        type: string
      plan_path:
        type: string
      github:
        type: object
        properties:
          organization:
            type: string
          repo:
            type: string
  projectUpdate:
    properties:
      plan_path:
        type: string
      github:
        type: object
        properties:
          organization:
            type: string
          repo:
            type: string
  userProfile:
    properties:
      id:
        type: string
      name:
        type: string
      email:
        type: string
  userProfileUpdate:
    properties:
      email:
        type: string
  origin:
    properties:
      id:
        type: integer
        required: false
      name:
        type: string
        required: false
      owner_id:
        type: string
        required: false
      default_package_visibility:
        type: string
        enum:
          - Public
          - Private
        required: false
  secret_key:
    properties:
      id:
        type: string
      origin_id:
        type: string
      name:
        type: string
      revision:
        type: string
      body:
        type: string
      owner_id:
        type: string
  event:
    properties:
      operation:
        type: string
      created_at:
        type: string
        required: false
      origin:
        type: string
      channel:
        type: string
      package_ident:
        type: ident
  events:
    properties:
      jobs:
        minItems: 0
        uniqueItems: true
        type: array
        items:
          type: event
        required: false
  ident:
    properties:
      origin:
        type: string
      name:
        type: string
      version:
        type: string
      release:
        type: string
/status:
  get:
    description: Returns the health of the service
    responses:
      '200':
        description: Service is healthy
      '500':
        description: Server fault
      '503':
        description: Service temporarily unavailable
/ext:
  '/installations/{install_id}':
    uriParameters:
      install_id: {}
    '/repos/{repo_id}':
      uriParameters:
        repo_id: {}
      '/contents/{path}':
        get:
          responses:
            '200':
              body:
                application/json:
                  required: false
            '400':
              description: Bad search query parameter provided
        uriParameters:
          path: {}
  '/integrations/{registry_type}':
    uriParameters:
      registry_type: {}
    /credentials/validate:
      post:
        description: Validates registry credentials
        responses:
          '200':
            description: Registry credentials validated
          '400':
            description: Bad Request
          '401':
            description: Authentication failed
        body:
          application/json:
            example:
              user: user
              password: password
              url: url
            required: false
/profile:
  get:
    description: Retrieve your profile
    responses:
      '200':
        body:
          application/json:
            example:
              id: 1234567890
              name: jimmy
              email: jimmy@example.com
            type: userProfile
            required: false
      '401':
        description: Authentication failed
    securedBy:
      - oauth_2_0
  patch:
    description: Update your profile
    responses:
      '200':
        description: Update successful
      '401':
        description: Authentication failed
      '422':
        description: Bad JSON submitted
    body:
      application/json:
        example:
          email: jimmy@example.com
        type: userProfileUpdate
        required: false
    securedBy:
      - oauth_2_0
  /access-tokens:
    get:
      description: Retrieve your personal access tokens
      responses:
        '200':
          body:
            application/json:
              example: ''
              required: false
        '401':
          description: Authentication failed
      securedBy:
        - oauth_2_0
    post:
      description: Generate a new personal access token
      responses:
        '200':
          body:
            application/json:
              required: false
        '400':
          description: Received a malformed JSON body
        '401':
          description: Authentication failed
      body:
        application/json:
          required: false
      securedBy:
        - oauth_2_0
    delete:
      description: Delete (revoke) a personal access token
      responses:
        '200':
          description: Delete successful
        '401':
          description: Authentication failed
      body:
        application/json:
          required: false
      securedBy:
        - oauth_2_0
/jobs:
  post:
    description: Create a new job for the given project
    responses:
      '201':
        body:
          application/json:
            example:
              id: '73089155726360582'
              state: 0
            required: false
      '400':
        description: Received a malformed JSON body
      '404':
        description: Project does not exist with corresponding projectId
      '422':
        description: Invalid or missing projectId in body
    body:
      application/json:
        example:
          project_id: core/nginx
        type: jobCreate
        required: false
    securedBy:
      - oauth_2_0
  '/{jobId}':
    get:
      description: Get the status of the given job
      responses:
        '200':
          body:
            application/json:
              example:
                id: '73089155726360582'
                origin: core
                project: nginx
                version: 1.0.0
                release: '20170505001756'
                state: Complete
                created_at: '2017-05-05 00:42:35.213765+00'
                build_started_at: '2017-05-05 00:43:11.729835+00'
                build_finished_at: '2017-05-05 00:44:00.896919+00'
              type: job
              required: false
        '400':
          description: Received a jobId that was not a number
    uriParameters:
      jobId: {}
    /log:
      get:
        description: |
          Get the build log (or a portion thereof) for the
          given job. Until an SSE endpoint can be implemented,
          this endpoint can be used to poll for the logs of a
          currently-running job; use of the `start` query
          parameter ensures that only the portion of the log
          that is "new", relative to a prior request, will be
          retrieved.
        responses:
          '200':
            body:
              application/json:
                example: |
                  {
                      "start": 0,
                      "stop": 2,
                      "content": [
                          "this is the first line",
                          "this is the second line"
                      ],
                      is_complete: false
                  }
                type: jobLog
                required: false
          '400':
            description: |
              Received a jobId that was not a number, or
              an invalid value for the `start` query
              parameter (e.g., negative, or larger than
              the actual size of the log file.
          '404':
            description: |
              Job does not exist with corresponding jobId,
              or no log was found for the given job.
        queryParameters:
          start:
            required: false
            minimum: 0
            description: |
              Return the portion of the log output that
              starts at the zero-indexed line
              specified. A request with no given value
              defaults to `0`; in other words, the
              entire log will be sent back.
            example: 100
            default: 0
            type: integer
          color:
            required: false
            description: |
              Whether or not to include embedded ANSI color
              codes in the log output. By default, all ANSI
              sequences are removed, yielding plain output.

              The following values are interpreted as `true`:
                * `true`
                * `TRUE`
                * `t`
                * `T`
                * `1`
                * `on`
                * `ON`

              The following values are interpreted as `false`:
                * `false`
                * `FALSE`
                * `f`
                * `F`
                * `0`
                * `off`
                * `OFF`

              All other values are considered `false`.
            default: false
            type: boolean
  '/group/{id}':
    uriParameters:
      id: {}
    /cancel:
      post:
        description: Cancels a job group
        responses:
          '200':
            description: Successful
          '400':
            description: ID or channel not provided
          '404':
            description: Group not found
          '500':
            description: Internal server error
    /rebuild:
      post:
        description: Rebuilds a job group
        responses:
          '200':
            description: Successful
          '400':
            description: ID or channel not provided
          '404':
            description: Group not found
          '500':
            description: Internal server error
    '/promote/{channel}':
      post:
        description: Promote every successful project in a job group to the specified channel
        responses:
          '200':
            description: Successful promotion
          '400':
            description: ID or channel not provided
          '404':
            description: Group not found
          '500':
            description: Internal server error
      uriParameters:
        channel: {}
    '/demote/{channel}':
      post:
        description: Demote every successful project in a job group to the specified channel
        responses:
          '200':
            description: Successful demotion
          '400':
            description: ID or channel not provided
          '404':
            description: Group not found
          '500':
            description: Internal server error
      uriParameters:
        channel: {}
/user:
  /invitations:
    get:
      securedBy:
        - oauth_2_0
  '/{invitationId}':
    delete:
      responses:
        '204':
          description: Invitation successfully ignored
      securedBy:
        - oauth_2_0
    put:
      responses:
        '204':
          description: Invitation successfully accepted
      securedBy:
        - oauth_2_0
    uriParameters:
      invitationId: {}
  /origins:
    get:
      securedBy:
        - oauth_2_0
/projects:
  post:
    description: |
      Creates a new project for building a Habitat plan scoped to the given origin. The
      resulting project will be created with an identifier containing the origin and name
      of the project the plan is building separated by a forward slash (i.e. `core/nginx`).
    responses:
      '201':
        description: Project created successfully
        body:
          application/json:
            example:
              id: habitat/builder-api
              plan_path: components/builder-api/plan.sh
              vcs:
                type: git
                url: 'https://github.com/habitat-sh/habitat.git'
            type: project
            required: false
      '400':
        description: Received a malformed JSON body
      '409':
        description: This project already exists
      '422':
        description: |
          The request body contained missing or invalid values or the file at the given
          location was unreadable or did not contain a valid plan.
    body:
      application/json:
        example:
          origin: core
          plan_path: components/builder-api/plan.sh
          installation_id: 1234
          repo_id: 4567
        type: projectCreate
        required: false
    securedBy:
      - oauth_2_0
  '/{origin}':
    '/{name}':
      get:
        description: Return the project matching the given ID
        responses:
          '200':
            body:
              application/json:
                example:
                  id: habitat/builder-api
                  plan_path: components/builder-api/plan.sh
                  vcs:
                    type: git
                    url: 'https://github.com/habitat-sh/habitat.git'
                type: project
                required: false
      put:
        description: Update the project matching the given ID
        responses:
          '204':
            description: Project updated successfully
          '400':
            description: Received a malformed JSON body
          '404':
            description: Project not found
          '422':
            description: |
              The request body contained missing or invalid values or the file at the
              given location was unreadable, did not contain a valid plan, or the name
              of the package it builds does not match the projectId's `name`
        body:
          application/json:
            example:
              plan_path: components/builder-api/plan.sh
              github:
                organization: habitat-sh
                repo: habitat
            type: project
            required: false
        securedBy:
          - oauth_2_0
      delete:
        description: Destroys the project matching the given ID
        responses:
          '204':
            description: Project deleted successfully
          '404':
            description: Project not found
        securedBy:
          - oauth_2_0
      uriParameters:
        name: {}
      '/{visibility}':
        patch:
          description: |
            Toggle the visibility settings on a project. Public projects that are made
            private will change to hidden instead. Changes made to a project's
            visibility settings will cascade to its packages.
          responses:
            '204':
              description: Visibility settings toggled successfully
            '400':
              description: 'Missing origin, name, visibility. Visibility other than public or private submitted.'
            '403':
              description: Not authorized to modify this origin
            '500':
              description: Internal server error
        uriParameters:
          visibility: {}
      /jobs:
        get:
          description: |
            Retrieve the most recently started jobs for the given project.
          responses:
            '200':
              body:
                application/json:
                  example:
                    range_start: 0
                    range_end: 5
                    total_count: 6
                    data:
                      - id: '73089155726360582'
                        origin: core
                        project: nginx
                        version: 1.0.0
                        release: '20170505001756'
                        state: Complete
                        created_at: '2017-05-05 00:42:35.213765+00'
                        build_started_at: '2017-05-05 00:43:11.729835+00'
                        build_finished_at: '2017-05-05 00:44:00.896919+00'
                  type: jobs
                  required: false
            '404':
              description: Project not found
      '/integrations/{integration}':
        /default:
          get:
            description: Fetch the specified integration
            responses:
              '200':
                body:
                  application/json:
                    required: false
              '404':
                description: Integration not found
          put:
            description: Deletes an integration
            responses:
              '200':
                description: Integration deleted
              '400':
                description: Invalid or Empty Integration
              '401':
                description: Unauthorized
        uriParameters:
          integration: {}
    uriParameters:
      origin: {}
/origins:
  post:
    description: Create a new origin
    responses:
      '200':
        body:
          application/json:
            example:
              id: '77732030103691265'
              name: reset
              owner_id: '77730215748435968'
              default_package_visibility: public
            type: origin
            required: false
      '409':
        description: The origin already exists
      '422':
        description: Malformed origin in request body
    body:
      application/json:
        example:
          name: reset
          default_package_visibility: public
        type: origin
        required: false
    securedBy:
      - oauth_2_0
  '/{origin}':
    uriParameters:
      origin: {}
    /integrations:
      get:
        description: Get an object of all integrations
        responses:
          '200':
            body:
              application/json:
                example:
                  docker:
                    - region1
                    - region2
                  google:
                    - region3
                required: false
        securedBy:
          - oauth_2_0
      '/{integrationName}':
        uriParameters:
          integrationName: {}
        /default:
          put:
            description: Create or update an origin project integration
            responses:
              '204':
                body:
                  application/json:
                    example:
                      docker_hub_repo_name: myorg/myrepo
                      custom_tag: some-tag
                      latest_tag: true
                      version_tag: false
                      version_release_tag: true
                    required: false
              '500':
                description: Internal server error
            securedBy:
              - oauth_2_0
          delete:
            description: Delete an origin project integration
            responses:
              '204':
                description: Integration deleted
              '500':
                description: Internal server error
            securedBy:
              - oauth_2_0
    /depart:
      post:
        description: Leave an origin you no longer wish to be a member of
        securedBy:
          - oauth_2_0
    '/users/{username}':
      uriParameters:
        username: {}
      /invitations:
        post:
          description: Create an invitation to this origin for this user
          responses:
            '201':
              description: Invitation created successfully
            '204':
              description: Invitation creation request received
            '400':
              description: No origin or username given
            '401':
              description: You are not authorized to send invitations on behalf of this origin
            '500':
              description: Internal server error
          securedBy:
            - oauth_2_0
      /role:
        put:
          description: Update an origin member's role
          responses:
            '204':
              description: Member role updated
            '403':
              description: Unauthorized to perform this action
            '404':
              description: Invalid origin or username given
            '500':
              description: Internal server error
          queryParameters:
            role:
              type: string
          securedBy:
            - oauth_2_0
        get:
          description: Retrieve an origin member's role
          responses:
            '200':
              body:
                application/json:
                  example:
                    role:
                      - administrator
                  required: false
          securedBy:
            - oauth_2_0
    '/transfer/{user}':
      post:
        description: Transfer ownership of origin to new origin member
        responses:
          '204':
            description: Transfer successful
          '403':
            description: Not authorized to transfer ownership
          '422':
            description: Cannot transfer to self or non-members
          '500':
            description: Internal server error
        securedBy:
          - oauth_2_0
      uriParameters:
        user: {}
    '/invitations/{invitationId}':
      put:
        description: Accept this invitation
        responses:
          '204':
            description: Accepted the invitation
          '400':
            description: No origin or invitation id given
          '500':
            description: Internal server error
        securedBy:
          - oauth_2_0
      delete:
        description: Rescind an invitation that hasn't already been ignored
        responses:
          '204':
            description: Invitation rescinded
          '400':
            description: No origin or invitation id given
          '500':
            description: Internal server error
        securedBy:
          - oauth_2_0
      uriParameters:
        invitationId: {}
      /ignore:
        put:
          description: Ignore this invitation
          responses:
            '204':
              description: Invitation ignored
            '400':
              description: No origin or invitation id given
            '500':
              description: Internal server error
          securedBy:
            - oauth_2_0
  '/{originId}':
    get:
      body:
        application/json:
          example: |
            {
                "id": "77732030103691265",
                "name": "reset",
                "owner_id": "77730215748435968"
                "default_package_visibility": "public"
            }
          type: origin
          required: false
    uriParameters:
      originId: {}
    /keys:
      get:
        description: Return a list of key revisions for an organization.
        responses:
          '200':
            body:
              application/json:
                example:
                  - origin: core
                    revision: '20160423193732'
                    location: /origins/core/keys/20160423193732
                  - origin: core
                    revision: '20160423193733'
                    location: /origins/core/keys/20160423193733
                required: false
      '/{revision}':
        get:
          description: Get a key revision for a specific origin
          responses:
            '200':
              body:
                text/plain:
                  example: |
                    SIG-PUB-1
                    core-20160423193745

                    Jpmj1gD9oTFCgz3wSLltt/QB6RTmNRWoUTe+xhDTIHc=
                  required: false
        post:
          description: Upload a new key revision for an origin
          responses:
            '201':
              description: Key successfully uploaded
            '403':
              description: Authenticated user not a member of the given Origin
            '409':
              description: Key already exists in Origin
          body:
            text/plain:
              example: |
                SIG-PUB-1
                core-20160423193745

                Jpmj1gD9oTFCgz3wSLltt/QB6RTmNRWoUTe+xhDTIHc=
              required: false
          securedBy:
            - oauth_2_0
        uriParameters:
          revision: {}
    /encryption_key:
      get:
        description: Download public encryption key for origin responses
    /secret:
      post:
        description: upload a secret payload body
      get:
        description: Get a list of all secrets for your origin
        responses:
          '200':
            body:
              application/json:
                example:
                  - key1: value
                  - key2: value
                required: false
      '/{secret}':
        delete:
          description: Delete a secret for an origin given a secret name
          responses:
            '200':
              description: Key deleted
            '404':
              description: Key not found
        uriParameters:
          secret: {}
    /users:
      get:
        description: List all members of an origin
        responses:
          '200':
            body:
              application/json:
                example:
                  members:
                    - reset
                  origin_id: '77731431660388352'
                required: false
    /secret_keys/latest:
      get:
        description: Retrieve the latest secret key
        responses:
          '200':
            body:
              application/json:
                example:
                  id: ''
                  origin_id: ''
                  name: ''
                  revision: ''
                  body: ''
                  owner_id: ''
                type: secret_key
                required: false
          '409':
            description: Secret key already exists in origin
/pkgs:
  '/{origin}':
    get:
      description: List packages for an origin
      responses:
        '200': {}
        '400': {}
        '404': {}
        '500': {}
      queryParameters:
        distinct:
          required: false
          description: Whether to show a distinct list of packages or not
          example: true
          default: false
          type: boolean
    uriParameters:
      origin: {}
    '/{name}':
      get:
        description: Returns list of release versions for a given package
        responses:
          '200':
            body:
              application/json:
                example:
                  range_start: 0
                  range_end: 5
                  total_count: 6
                  data:
                    - origin: core
                      name: libbsd
                      version: 0.11.3
                      release: '20210826063141'
                      channels:
                        - stable
                      platforms:
                        - x86_64-linux

          '400': {}
          '404': {}
          '500': {}
      uriParameters:
        name: {}
      /versions:
        get:
          description: Returns all versions and a count of releases for each version for a given package
          responses:
            '200':
              body:
                application/json:
                  example:
                    - origin: core
                      name: redis
                      version: 3.2.1
                      release_count: '3'
                      latest: '20170215222111'
                  required: false
            '400':
              description: Origin or package name not supplied
            '404':
              description: Package not found
            '500':
              description: Server error
      /latest:
        get:
          description: TODO
          responses:
            '200': {}
            '404': {}
            '500': {}
      '/{version}':
        get:
          description: TODO
          responses:
            '200': {}
            '400': {}
            '404': {}
            '500': {}
        uriParameters:
          version: {}
        /latest:
          get:
            responses:
              '200': {}
              '404': {}
              '500': {}
        '/{release}':
          get:
            responses:
              '200': {}
              '404': {}
              '500': {}
          post:
            responses:
              '200': {}
              '400': {}
              '409': {}
              '422': {}
              '424': {}
          uriParameters:
            release: {}
          '/{visibility}':
            patch:
              description: Change the visibility of a package
              responses:
                '200':
                  description: Successfully changed
                '400':
                  description: Missing origin or name or version or release or visibility. Visibility not "public" or "private".
                '403':
                  description: Unauthorized to change packages for this origin
                '404':
                  description: Package not found
                '500':
                  description: Internal server error
            uriParameters:
              visibility: {}
          /download:
            get:
              responses:
                '200': {}
                '400': {}
                '500': {}
          /channels:
            get:
              responses:
                '200':
                  body:
                    application/json:
                      example:
                        - stable
                        - unstable
                      required: false
                '400':
                  description: Package identifier is not fully qualified
                '404':
                  description: Specified package could not be found
                '500':
                  description: Internal server error
  '/search/{query}':
    get:
      description: Search for packages with a query string
      responses:
        '200':
          description: Packages were found and fit on one page
        '206':
          description: Packages were found and require pagination
        '500':
          description: Internal server error
      queryParameters:
        distinct:
          required: false
          description: Whether to show a distinct list of packages or not
          example: true
          default: false
          type: boolean
    uriParameters:
      query: {}
/events:
  get:
    description: Fetch local builder events
    responses:
      '200':
        body:
          application/json:
            example: |
              {
                  "range_start": 0,
                  "range_end": 1,
                  "total_count": 1,
                  "data": [
                      {
                         "operation": "Promote",
                         "created_at": "2021-12-28T20:24:49.588691",
                         "origin": "core",
                         "channel": "stable",
                         "package_ident": {
                         "origin": "core",
                         "name": "hab-backline",
                         "version": "1.6.420",
                         "release": "20211101174345"
                      }
                  ]
              }
            type: events
            required: false
      '204':
        body:
          application/json:
            example: |
              {
                  "range_start": 0,
                  "range_end": 1,
                  "total_count": 1,
                  "data": [
                      {
                         "operation": "Promote",
                         "created_at": "2021-12-28T20:24:49.588691",
                         "origin": "core",
                         "channel": "stable",
                         "package_ident": {
                         "origin": "core",
                         "name": "hab-backline",
                         "version": "1.6.420",
                         "release": "20211101174345"
                      }
                  ]
              }
            type: events
            required: false
      '400':
        description: Bad search query parameter provided
    queryParameters:
      nextRange:
        description: Paginated index of next range to return
        type: integer
      fromDate:
        description: From date to include in query results (inclusive)
        type: string
      toDate:
        description: To date to include in query results (inclusive)
        type: string
      query:
        description: Query parameters
        default: ''
        type: string
  /saas:
    get:
      description: Fetch SAAS builder events
      responses:
        '200':
          body:
            application/json:
              example: |
                {
                    "range_start": 0,
                    "range_end": 1,
                    "total_count": 1,
                    "data": [
                        {
                           "operation": "Promote",
                           "created_at": "2021-12-28T20:24:49.588691",
                           "origin": "core",
                           "channel": "stable",
                           "package_ident": {
                           "origin": "core",
                           "name": "hab-backline",
                           "version": "1.6.420",
                           "release": "20211101174345"
                        }
                    ]
                }
              type: events
              required: false
        '204':
          body:
            application/json:
              example: |
                {
                    "range_start": 0,
                    "range_end": 1,
                    "total_count": 1,
                    "data": [
                        {
                           "operation": "Promote",
                           "created_at": "2021-12-28T20:24:49.588691",
                           "origin": "core",
                           "channel": "stable",
                           "package_ident": {
                           "origin": "core",
                           "name": "hab-backline",
                           "version": "1.6.420",
                           "release": "20211101174345"
                        }
                    ]
                }
              type: events
              required: false
        '400':
          description: Bad search query parameter provided
      queryParameters:
        nextRange:
          description: Paginated index of next range to return
          type: integer
        fromDate:
          description: From date to include in query results (inclusive)
          type: string
        toDate:
          description: To date to include in query results (inclusive)
          type: string
        query:
          description: Query parameters
          default: ''
          type: string
/notify:
  post:
    description: 'Notification of github events [ping, push]'
    responses:
      '200':
        description: Successful
      '400':
        description: Invalid parameter provided
    body:
      application/json:
        required: false
'/{origin}':
  /pkgs:
    get:
      description: Fetch list of unique packages for specified origin
      responses:
        '200':
          description: Successful
          body:
            application/json:
              required: false
        '400':
          description: Invalid origin provided
        '500':
          description: Internal error
  uriParameters:
    origin: {}
'/authenticate/{code}':
  get:
    responses:
      '200':
        body:
          application/json:
            example:
              token: 0b79bab50daca910b000d4f1a2b675d604257e42
              email: reset@chef.io
              name: reset
              id: '73089155726360582'
              flags: 0
            required: false
  uriParameters:
    code: {}
'/rdeps/{origin}':
  uriParameters:
    origin: {}
  '/{name}':
    get:
      description: |
        Retrieves the list of reverse dependencies for this package.
      responses:
        '200':
          body:
            application/json:
              example:
                origin: core
                name: linux-headers
                rdeps:
                  - core/redis
              required: false
        '404':
          description: Package not found
        '500':
          description: Internal server error
    uriParameters:
      name: {}
    /group:
      get:
        description: |
          Retrieves the list of reverse dependencies for this package,
          collated into build groups that can be build in parallel
        responses:
          '200':
            body:
              application/json:
                example:
                  origin: core
                  name: linux-headers
                  rdeps:
                    - group: 0
                      idents:
                        - core/redis
                        - core/protobuf
                    - group: 1
                      idents:
                        - core/node
                required: false
          '404':
            description: Package not found
          '500':
            description: Internal server error
'/channels/{origin}':
  get:
    description: List all channels for an origin
    responses:
      '200':
        body:
          application/json:
            example:
              - stable
              - unstable
            required: false
      '400':
        description: Origin not specified
  uriParameters:
    origin: {}
  '/{channel}':
    post:
      description: Create a channel
      responses:
        '201':
          description: Channel successfully created
        '400':
          description: Origin or channel not supplied
        '404':
          description: Origin does not exist
        '409':
          description: Channel already exists
        '500':
          description: Server error
    delete:
      description: Deletes a channel
      responses:
        '200':
          description: Channel successfully deleted
        '400':
          description: Origin or channel not supplied
        '403':
          description: Channel can not be deleted
        '500':
          description: Server error
    uriParameters:
      channel: {}
    /pkgs:
      get:
        description: List all packages in a channel
        responses:
          '200':
            description: Returns a list of packages
            body:
              application/json:
                example:
                  range_start: 0
                  range_end: 49
                  total_count: 8
                  data:
                    - origin: core
                      name: glibc
                      version: '2.22'
                      release: '20160612063629'
                    - origin: core
                      name: linux-headers
                      version: '4.3'
                      release: '20160612063537'
                required: false
          '400':
            description: Origin or channel not supplied
          '404':
            description: Origin or channel does not exist
          '500':
            description: Server error
      /_latest:
        get:
          description: 'List latest packages in a channel, by target (required)'
          responses:
            '200':
              description: Returns a list of packages
              body:
                application/json:
                  example:
                    channel: stable
                    target: x86_64-linux
                    data:
                      - origin: core
                        name: glibc
                        version: '2.22'
                        release: '20160612063629'
                      - origin: core
                        name: linux-headers
                        version: '4.3'
                        release: '20160612063537'
                  required: false
      /promote:
        post:
          description: Promotes all packages in a channel queryParameters
          responses:
            '200':
              description: Packages successfully promoted
            '400':
              description: Forbidden packages/Badly formed request for promotion
            '401':
              description: You are not authorized to request promotion for this origin
            '500':
              description: Server error
      /demote:
        post:
          description: Demotes list of packages from a channel queryParameters
          responses:
            '200':
              description: Packages successfully demoted
            '400':
              description: Forbidden packages/Badly formed request for demotion
            '401':
              description: You are not authorized to request demotion for this origin
            '500':
              description: Server error
      '/{pkg}':
        get:
          description: List all packages in a channel that match the specified identifier
          responses:
            '200':
              description: Returns a list of packages
            '400':
              description: Origin or channel not supplied
            '404':
              description: Origin or channel does not exist
            '500':
              description: Server error
        uriParameters:
          pkg: {}
        /latest:
          get:
            description: Get the latest version of the package in this channel that matches the specified identifier
            responses:
              '200':
                description: Returns a package
                body:
                  application/json:
                    example:
                      checksum: 7a998b6a756f7ca769ac75edf66c119d14aa911d7cfb5fd91ad3ff21ddf0d257
                      config: ''
                      deps:
                        - name: glibc
                          origin: core
                          release: '20160612063629'
                          version: '2.22'
                      exposes: []
                      ident:
                        name: tree
                        origin: core
                        release: '20161102210957'
                        version: 1.7.0
                      manifest: |-
                        # core / tree


                        * __Maintainer__: The Habitat Maintainers <humans@habitat.sh>
                        * __Version__: 1.7.0
                        * __Release__: 20161102210957
                        * __Architecture__: x86_64
                        * __System__: linux
                        * __Target__: x86_64-linux
                        * __Upstream URL__: upstream project's website or home page is not defined
                        * __License__: gplv2+ 
                        * __Source__: [http://mama.indstate.edu/users/ice/tree/src/tree-1.7.0.tgz](http://mama.indstate.edu/users/ice/tree/src/tree-1.7.0.tgz)
                        * __SHA__: `6957c20e82561ac4231638996e74f4cfa4e6faabc5a2f511f0b4e3940e8f7b12`
                        * __Path__: `/hab/pkgs/core/tree/1.7.0/20161102210957`
                        * __Build Dependencies__: `core/make core/gcc `
                        * __Dependencies__: `core/glibc `
                        * __Interpreters__: no interpreters or undefined

                        # Plan

                        ## Build Flags

                        ```bash
                        CFLAGS: -I/hab/pkgs/core/glibc/2.22/20160612063629/include -I/hab/pkgs/core/make/4.2.1/20161102154828/include -I/hab/pkgs/core/gcc/5.2.0/20161031031637/include
                        CPPFLAGS: -I/hab/pkgs/core/glibc/2.22/20160612063629/include -I/hab/pkgs/core/make/4.2.1/20161102154828/include -I/hab/pkgs/core/gcc/5.2.0/20161031031637/include
                        CXXFLAGS: -I/hab/pkgs/core/glibc/2.22/20160612063629/include -I/hab/pkgs/core/make/4.2.1/20161102154828/include -I/hab/pkgs/core/gcc/5.2.0/20161031031637/include
                        LDFLAGS: -L/hab/pkgs/core/glibc/2.22/20160612063629/lib -L/hab/pkgs/core/gcc/5.2.0/20161031031637/lib
                        LD_RUN_PATH: /hab/pkgs/core/tree/1.7.0/20161102210957/lib:/hab/pkgs/core/glibc/2.22/20160612063629/lib
                        ```

                        ## Plan Source

                        ```bash
                        pkg_name=tree
                        pkg_origin=core
                        pkg_version=1.7.0
                        pkg_maintainer="The Habitat Maintainers <humans@habitat.sh>"
                        pkg_license=('gplv2+')
                        pkg_source=http://mama.indstate.edu/users/ice/tree/src/tree-${pkg_version}.tgz
                        pkg_shasum=6957c20e82561ac4231638996e74f4cfa4e6faabc5a2f511f0b4e3940e8f7b12
                        pkg_deps=(core/glibc)
                        pkg_build_deps=(core/make core/gcc)
                        pkg_bin_dirs=(bin)
                        pkg_include_dirs=(include)
                        pkg_lib_dirs=(lib)

                        do_build() {
                          make
                        }

                        do_install() {
                          sed -i "s#prefix = /usr#prefix = ${pkg_prefix}#" Makefile
                          make install
                        }
                        ```
                      tdeps:
                        - name: glibc
                          origin: core
                          release: '20160612063629'
                          version: '2.22'
                        - name: linux-headers
                          origin: core
                          release: '20160612063537'
                          version: '4.3'
                    required: false
              '400':
                description: Origin or channel or identifier not supplied
              '404':
                description: Origin or channel does not exist
              '500':
                description: Server error
        '/{version}':
          get:
            description: List all packages in a channel that match the specified identifier and version
            responses:
              '200':
                description: Returns a list of packages
              '400':
                description: Origin or channel or identifier or version not supplied
              '404':
                description: Origin or channel does not exist
              '500':
                description: Server error
          uriParameters:
            version: {}
          /latest:
            get:
              description: Get the latest version of the package in this channel that matches the specified identifier and version
              responses:
                '200':
                  description: Returns a package
                '400':
                  description: Origin or channel or identifier or version not supplied
                '404':
                  description: Origin or channel does not exist
                '500':
                  description: Server error
          '/{release}':
            get:
              description: 'Get the package in a channel that matches the specified identifier, version and release'
              responses:
                '200':
                  description: Returns a package
                '400':
                  description: Origin or channel or identifier or version or release not supplied
                '404':
                  description: Origin or channel does not exist
                '500':
                  description: Server error
            uriParameters:
              release: {}
            /promote:
              put:
                description: Promote a package to a specific channel
                responses:
                  '200':
                    description: Package successfully promoted
                  '400':
                    description: Origin or channel or identifier or version or release not supplied
                  '404':
                    description: Origin or channel or identifier or version or release does not exist
                  '500':
                    description: Server error
            /demote:
              put:
                description: Demote a package from a specific channel
                responses:
                  '200':
                    description: Package successfully demoted
                  '400':
                    description: Origin or channel or identifier or version or release not supplied
                  '403':
                    description: Attempting to demote from unstable is not supported
                  '404':
                    description: Origin or channel or identifier or version or release does not exist
                  '500':
                    description: Server error
'/settings/{origin}':
  uriParameters:
    origin: {}
  '/{name}':
    uriParameters:
      name: {}
    /post:
      description: Create new package settings entry
      securedBy:
        - oauth_2_0
    /get:
      description: Get package settings for top level package
    /put:
      description: Update a package settings entry
      securedBy:
        - oauth_2_0
    /delete:
      description: Delete a package settings entry
      securedBy:
        - oauth_2_0

